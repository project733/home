{"version":3,"file":"static/css/main.db565aff.css","mappings":"mJAEA,gBCDI,mBACA,kDACA,WACA,gBACA,kBACA,mBACA,UDDJ,KACE,uBAGF,KASE,mCACA,kCATA,qBEXW,CDmBT,aCjBS,CDcT,gCEdoB,CFUpB,iBAKA,eETe,CFYf,kBDAF,CI4JA,4BJzJF,aCgBI,qBAEA,gCACI,cIlCR,+VA2EE,uBAJA,SAEA,eAJA,SAGA,UAFA,UAIA,sBACA,CAGF,KACE,cAGF,8EAWE,cAIA,OACE,gBAIJ,aAEE,YAKA,oDAEE,WACA,aAIJ,EAKE,uBAFA,eAFA,SACA,UAEA,sBACA,CAIF,IAGE,qBAIF,SANE,sBACA,UASA,CAJF,KAGE,kBACA,gBAGF,IACE,6BAKA,uBACE,yBACA,YAIJ,MACE,yBACA,iBAIF,GAGE,SACA,0BAHA,cACA,WAGA,aACA,UAGF,aAEE,sBAIF,iBAGE,sBC3KF,sBLsBI,kBKrB+B,CLkB/B,aACA,qBKnBe,CLoBf,sBKpBuB,CACzB,WFkKA,uBEpKF,sBAKI,oBF+JF,4BEpKF,sBL2BI,qBAEA,yCACI,cKjBR,OAUE,8LATA,kEACA,0BACA,YACA,YAEA,gBACA,YAvBQ,CAwBR,kBAHA,UAKA,CAEA,UACE,eACA,oBFyIF,4BE3IA,ULzBE,gBGoKF,uBE3IA,UASI,eFkIJ,yBE3IA,ULzBE,gBK0CF,mBAEE,eACA,oBFuHF,4BEpHA,ULhDE,gBGoKF,uBEpHA,UAMI,eF8GJ,yBEpHA,ULhDE,gBK8DF,0BACE,UArEK,CAsEL,yBAEF,4BACE,aAxEM,CA0ER,0BACE,cACA,uBACA,kBACA,kBAEA,gCAIE,gCADA,8BAMA,WAvFI,CA+EJ,WACA,cAGA,WAlFE,CAoFF,kBACA,uBAEA,4FAJA,UAIA,CF+EJ,4BE/FA,0BLrEE,gBGoKF,uBE/FA,0BAwBI,cACA,2BACA,iBAEA,gCAEE,gCADA,8BAEA,WAGA,UA1GE,CA2GF,QAFA,0FADA,SAGA,EF4DN,yBE/FA,0BLrEE,eK8GE,4BAEA,gCAEE,gCADA,8BAEA,YACA,YFgDN,uBEvJF,OA6GI,aACA,YAIJ,qBLzGI,kBK2G+B,CL9G/B,aACA,qBK6Ge,CADjB,YL3GE,sBK4GuB,CACzB,WAEA,6BAQE,sDADA,0DAEA,0EAHA,0EALA,uBACA,UASA,+BAPA,qBAOA,CFqBF,uBElBI,mCACE,kDACA,UArBR,qBA2BI,mBACA,mBACA,WAEA,6BACE,YACA,YACA,UAbE,CAmBN,2CACE,kDADF,4CACE,gDADF,4CACE,oDADF,4CACE,kDADF,4CACE,oDADF,4CACE,kDAIJ,uCACE,GACE,0BAEF,IACE,6BAEF,GACE,2BARJ,+BACE,GACE,0BAEF,IACE,6BAEF,GACE,2BAIJ,qCACE,GACE,UAEF,GACE,WALJ,6BACE,GACE,UAEF,GACE","sources":["css/global.scss","css/utilities/_mixins.scss","css/utilities/_colors.scss","css/utilities/_typography.scss","../node_modules/sass-mq/_mq.scss","css/utilities/_reset.scss","App.module.scss"],"sourcesContent":["@import \"utilities/index\";\n\n.visuallyhidden {\n  @include visually-hidden;\n}\n\nhtml {\n  scroll-behavior: smooth;\n}\n\nbody {\n  background-color: $body-color;\n  @include text-format(\n    $font-family-monserrat,\n    $font-weight-bold,\n    12,\n    $font-color,\n    normal\n  );\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.noscrollbar {\n  @include mq($from: desktop) {\n    @include hide-scrollbars;\n  }\n}\n","@mixin visually-hidden {\n    clip: rect(0 0 0 0);\n    clip-path: inset(50%);\n    height: 1px;\n    overflow: hidden;\n    position: absolute;\n    white-space: nowrap;\n    width: 1px;\n}\n\n@mixin font-size($pixel-value) {\n    $base: 16;\n    font-size: calc($pixel-value / $base) + rem;\n}\n\n@mixin text-format($family, $weight, $pixel-value, $color, $line-height) {\n    font-family: $family;\n    font-weight: $weight;\n    @include font-size($pixel-value);\n    color: $color;\n    line-height: $line-height;\n}\n\n@mixin truncate-text {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n}\n\n// Flexbox\n@mixin flexbox($direction: row, $justify: normal, $align: normal) {\n    display: flex;\n    flex-direction: $direction;\n    justify-content: $justify;\n    align-items: $align;\n}\n\n// Hide scrollbars but keep functionality\n@mixin hide-scrollbars {\n    scrollbar-width: none; /* Firefox */\n\n    &::-webkit-scrollbar {\n        display: none;\n    }\n}","$body-color: #000;\n\n$font-color: #ededed;","@import url(\"https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&family=Raleway&family=Roboto+Condensed:wght@300;400;700&display=swap\");\n\n$font-family-monserrat: \"Monserrat\", sans-serif;\n$font-family-raleway: \"Raleway\", sans-serif;\n$font-family-roboto: \"Roboto Condensed\", sans-serif;\n\n$font-weight-thin: 300;\n$font-weight-regular: 400;\n$font-weight-bold: 700;\n","@use 'sass:math';\n@use 'sass:map';\n@use 'sass:list';\n\n/// Breakpoint list\n///\n/// Name your breakpoints in a way that creates a ubiquitous language\n/// across team members. It will improve communication between\n/// stakeholders, designers, developers, and testers.\n///\n/// @type Map\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint Full documentation and examples\n$breakpoints: (\n  mobile: 320px,\n  tablet: 740px,\n  desktop: 980px,\n  wide: 1300px,\n) !default;\n\n/// Show breakpoints in the top right corner\n///\n/// If you want to display the currently active breakpoint in the top\n/// right corner of your site during development, add the breakpoints\n/// to this list, ordered by width. For example: (mobile, tablet, desktop).\n///\n/// @example scss\n///   @use 'path/to/mq' with ($show-breakpoints: ('mobile', 'tablet', 'desktop'));\n///\n///\n/// @type map\n$show-breakpoints: () !default;\n\n/// Customize the media type (for example: `@media screen` or `@media print`)\n/// By default sass-mq uses an \"all\" media type (`@media all and …`)\n///\n/// If you want to overried the media type, you can use this option.\n/// @example scss\n///   @use 'path/to/mq' with ($media-type: 'screen');\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#changing-media-type Full documentation and example\n$media-type: all !default;\n\n/// Convert pixels to ems\n///\n/// @param {Number} $px - value to convert\n///\n/// @example scss\n///  $font-size-in-ems: px2em(16px);\n///  p { font-size: px2em(16px); }\n///\n/// @returns {Number}\n\n@function px2em($px) {\n  @if math.is-unitless($px) {\n    @warn \"Assuming #{$px} to be in pixels, attempting to convert it into pixels.\";\n    @return px2em($px * 1px);\n  }\n  // if $px is compatible with em units, then return value unchanged\n  @if math.compatible($px, 1em) {\n    @return $px;\n  }\n  @return math.div($px, 16px) * 1em;\n}\n\n/// Get a breakpoint's width\n///\n/// @param {String} $name - Name of the breakpoint. One of $breakpoints\n///\n/// @example scss\n///  $tablet-width: get-breakpoint-width(tablet);\n///  @media (min-width: get-breakpoint-width(tablet)) {}\n///\n/// @requires {Variable} $breakpoints\n///\n/// @returns {Number} Value in pixels\n@function get-breakpoint-width($name, $breakpoints: $breakpoints) {\n  @if map.has-key($breakpoints, $name) {\n    @return map.get($breakpoints, $name);\n  } @else {\n    @warn \"Breakpoint #{$name} wasn't found in $breakpoints.\";\n    @return null;\n  }\n}\n\n/// Media Query mixin\n///\n/// @param {String | Boolean} $from [false] - One of $breakpoints\n/// @param {String | Boolean} $until [false] - One of $breakpoints\n/// @param {String | Boolean} $and [false] - Additional media query parameters\n/// @param {String} $media-type [$media-type] - Media type: screen, print…\n///\n/// @ignore Undocumented API, for advanced use only:\n/// @ignore @param {Map} $breakpoints [$breakpoints]\n///\n/// @content styling rules, wrapped into a @media query when $responsive is true\n///\n/// @requires {Variable} $media-type\n/// @requires {Variable} $breakpoints\n/// @requires {function} px2em\n/// @requires {function} get-breakpoint-width\n///\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-on-default Full documentation and examples\n///\n/// @example scss\n///  @use 'path/to/mq' as *;\n///  .element {\n///    @include mq($from: mobile) {\n///      color: red;\n///    }\n///    @include mq($until: tablet) {\n///      color: blue;\n///    }\n///    @include mq(mobile, tablet) {\n///      color: green;\n///    }\n///    @include mq($from: tablet, $and: '(orientation: landscape)') {\n///      color: teal;\n///    }\n///    @include mq(950px) {\n///      color: hotpink;\n///    }\n///    @include mq(tablet, $media-type: screen) {\n///      color: hotpink;\n///    }\n///    // Advanced use:\n///    $my-breakpoints: (L: 900px, XL: 1200px);\n///    @include mq(L, $breakpoints: $my-breakpoints) {\n///      color: hotpink;\n///    }\n///  }\n@mixin mq(\n  $from: false,\n  $until: false,\n  $and: false,\n  $media-type: $media-type,\n  $breakpoints: $breakpoints\n) {\n  $min-width: 0;\n  $max-width: 0;\n  $media-query: '';\n\n  // From: this breakpoint (inclusive)\n  @if $from {\n    @if type-of($from) == number {\n      $min-width: px2em($from);\n    } @else {\n      $min-width: px2em(get-breakpoint-width($from, $breakpoints));\n    }\n  }\n\n  // Until: that breakpoint (exclusive)\n  @if $until {\n    @if type-of($until) == number {\n      $max-width: px2em($until);\n    } @else {\n      $max-width: px2em(get-breakpoint-width($until, $breakpoints)) - 0.01em;\n    }\n  }\n\n  @if $min-width != 0 {\n    $media-query: '#{$media-query} and (min-width: #{$min-width})';\n  }\n  @if $max-width != 0 {\n    $media-query: '#{$media-query} and (max-width: #{$max-width})';\n  }\n  @if $and {\n    $media-query: '#{$media-query} and #{$and}';\n  }\n\n  // Remove unnecessary media query prefix 'all and '\n  @if ($media-type == 'all' and $media-query != '') {\n    $media-type: '';\n    $media-query: str-slice(unquote($media-query), 6);\n  }\n\n  @media #{$media-type + $media-query} {\n    @content;\n  }\n}\n\n/// Quick sort\n///\n/// @author Sam Richards\n/// @access private\n/// @param {List} $list - List to sort\n/// @returns {List} Sorted List\n@function _quick-sort($list) {\n  $less: ();\n  $equal: ();\n  $large: ();\n\n  @if length($list) > 1 {\n    $seed: list.nth($list, math.ceil(math.div(length($list), 2)));\n\n    @each $item in $list {\n      @if ($item == $seed) {\n        $equal: list.append($equal, $item);\n      } @else if ($item < $seed) {\n        $less: list.append($less, $item);\n      } @else if ($item > $seed) {\n        $large: list.append($large, $item);\n      }\n    }\n\n    @return join(join(_quick-sort($less), $equal), _quick-sort($large));\n  }\n\n  @return $list;\n}\n\n/// Sort a map by values (works with numbers only)\n///\n/// @access private\n/// @param {Map} $map - Map to sort\n/// @returns {Map} Map sorted by value\n@function _map-sort-by-value($map) {\n  $map-sorted: ();\n  $map-keys: map.keys($map);\n  $map-values: map.values($map);\n  $map-values-sorted: _quick-sort($map-values);\n\n  // Reorder key/value pairs based on key values\n  @each $value in $map-values-sorted {\n    $index: index($map-values, $value);\n    $key: list.nth($map-keys, $index);\n    $map-sorted: map.merge(\n      $map-sorted,\n      (\n        $key: $value,\n      )\n    );\n\n    // Unset the value in $map-values to prevent the loop\n    // from finding the same index twice\n    $map-values: list.set-nth($map-values, $index, 0);\n  }\n\n  @return $map-sorted;\n}\n\n/// Add a breakpoint\n///\n/// @param {String} $name - Name of the breakpoint\n/// @param {Number} $width - Width of the breakpoint\n///\n/// @requires {Variable} $breakpoints\n///\n/// @example scss\n///  @include add-breakpoint(tvscreen, 1920px);\n///  @include mq(tvscreen) {}\n@mixin add-breakpoint($name, $width) {\n  $new-breakpoint: (\n    $name: $width,\n  );\n  $breakpoints: map.merge($breakpoints, $new-breakpoint) !global;\n  $breakpoints: _map-sort-by-value($breakpoints) !global;\n}\n\n/// Show the active breakpoint in the top right corner of the viewport\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint\n///\n/// @param {List} $show-breakpoints [$show-breakpoints] - List of breakpoints to show in the top right corner\n/// @param {Map} $breakpoints [$breakpoints] - Breakpoint names and sizes\n///\n/// @requires {Variable} $breakpoints\n/// @requires {Variable} $show-breakpoints\n///\n/// @example scss\n///  // Show breakpoints using global settings\n///  @include show-breakpoints;\n///\n///  // Show breakpoints using custom settings\n///  @include show-breakpoints((L, XL), (S: 300px, L: 800px, XL: 1200px));\n@mixin show-breakpoints(\n  $show-breakpoints: $show-breakpoints,\n  $breakpoints: $breakpoints\n) {\n  body:before {\n    background-color: #fcf8e3;\n    border-bottom: 1px solid #fbeed5;\n    border-left: 1px solid #fbeed5;\n    color: #c09853;\n    font: small-caption;\n    padding: 3px 6px;\n    pointer-events: none;\n    position: fixed;\n    right: 0;\n    top: 0;\n    z-index: 100;\n\n    // Loop through the breakpoints that should be shown\n    @each $show-breakpoint in $show-breakpoints {\n      $width: get-breakpoint-width($show-breakpoint, $breakpoints);\n      @include mq($show-breakpoint, $breakpoints: $breakpoints) {\n        content: '#{$show-breakpoint} ≥ #{$width} (#{px2em($width)})';\n      }\n    }\n  }\n}\n\n@if list.length($show-breakpoints) > 0 {\n  @include show-breakpoints;\n}\n","/* \nhtml5doctor.com Reset Stylesheet\nv1.6.1\nLast Updated: 2010-09-17\nAuthor: Richard Clark - http://richclarkdesign.com \nTwitter: @rich_clark\n*/\n\nhtml,\nbody,\ndiv,\nspan,\nobject,\niframe,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\np,\nblockquote,\npre,\nabbr,\naddress,\ncite,\ncode,\ndel,\ndfn,\nem,\nimg,\nins,\nkbd,\nq,\nsamp,\nsmall,\nstrong,\nsub,\nsup,\nvar,\nb,\ni,\ndl,\ndt,\ndd,\nol,\nul,\nli,\nfieldset,\nform,\nlabel,\nlegend,\ntable,\ncaption,\ntbody,\ntfoot,\nthead,\ntr,\nth,\ntd,\narticle,\naside,\ncanvas,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\nsection,\nsummary,\ntime,\nmark,\naudio,\nvideo {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  outline: 0;\n  font-size: 100%;\n  vertical-align: baseline;\n  background: transparent;\n}\n\nbody {\n  line-height: 1;\n}\n\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\nsection {\n  display: block;\n}\n\nnav {\n  ul {\n    list-style: none;\n  }\n}\n\nblockquote,\nq {\n  quotes: none;\n}\n\nblockquote,\nq {\n  &:before,\n  &:after {\n    content: \"\";\n    content: none;\n  }\n}\n\na {\n  margin: 0;\n  padding: 0;\n  font-size: 100%;\n  vertical-align: baseline;\n  background: transparent;\n}\n\n/* change colours to suit your needs */\nins {\n  background-color: #ff9;\n  color: #000;\n  text-decoration: none;\n}\n\n/* change colours to suit your needs */\nmark {\n  background-color: #ff9;\n  color: #000;\n  font-style: italic;\n  font-weight: bold;\n}\n\ndel {\n  text-decoration: line-through;\n}\n\nabbr,\ndfn {\n  &[title] {\n    border-bottom: 1px dotted;\n    cursor: help;\n  }\n}\n\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n\n/* change border colour to suit your needs */\nhr {\n  display: block;\n  height: 1px;\n  border: 0;\n  border-top: 1px solid #cccccc;\n  margin: 1em 0;\n  padding: 0;\n}\n\ninput,\nselect {\n  vertical-align: middle;\n}\n\n/*** box sizing border-box for all elements ***/\n*,\n*::before,\n*:after {\n  box-sizing: border-box;\n}\n","@import \"css/utilities/index\";\n\n$body1: #a09b94;\n$body2: #776d5a;\n$body3: #453f3c;\n$body4: #a3b9c9;\n$hilite: #ffbb00;\n$hilite2: #ffa600;\n$footer: #4f5d75;\n$padding: 20px;\n$arrow: 50px;\n\n.container {\n  @include flexbox(column, normal, normal);\n  width: 100%;\n\n  @include mq($from: small-screen) {\n    flex-direction: row;\n  }\n\n  @include mq($from: desktop) {\n    @include hide-scrollbars;\n  }\n}\n\nheader {\n  background: linear-gradient(75deg, $body1, $body2, $body3, $body4);\n  background-size: 400% 400%;\n  flex-grow: 1;\n  height: auto;\n  width: 100%;\n  overflow: hidden;\n  padding: $padding;\n  position: relative;\n\n  animation: fadeIn 0.7s ease-in-out forwards, gradient 23s ease infinite;\n\n  h1 {\n    font-size: 25vw;\n    padding-bottom: calc($padding + 50px);\n\n    @include mq($from: tablet) {\n      @include font-size(96);\n    }\n\n    @include mq($from: small-screen) {\n      font-size: 7vw;\n    }\n\n    @include mq($from: wide2) {\n      @include font-size(96);\n    }\n  }\n\n  h2,\n  p {\n    font-size: 15vw;\n    padding-bottom: calc($padding * 2);\n  }\n\n  h2{\n    @include mq($from: tablet) {\n      @include font-size(64);\n    }\n\n    @include mq($from: small-screen) {\n      font-size: 4vw;\n    }\n\n    @include mq($from: wide2) {\n      @include font-size(64);\n    }\n  }\n\n  .myname {\n    color: $hilite;\n    text-transform: uppercase;\n  }\n  .myskills {\n    color: $hilite2;\n  }\n  .mywork {\n    font-size: 8vw;\n    padding: $padding $padding calc($padding * 3);\n    position: relative;\n    text-align: center;\n\n    &:after {\n      content: \"\";\n      display: block;\n      border-top: 10px solid $font-color;\n      border-right: 10px solid $font-color;\n      height: $arrow;\n      width: $arrow;\n      position: absolute;\n      right: calc(50% - $arrow);\n      bottom: $padding;\n      transform: translateX(-50%) rotate(135deg);\n    }\n\n    @include mq($from: tablet) {\n      @include font-size(48);\n    }\n\n    @include mq($from: small-screen) {\n      font-size: 3vw;\n      padding: $padding 6vw $padding $padding;\n      text-align: right;\n\n      &:after {\n        border-top: 0.8vw solid $font-color;\n        border-right: 0.8vw solid $font-color;\n        height: 3vw;\n        width: 3vw;\n        transform: translateY(-50%) rotate(45deg);\n        right: $padding;\n        top: 50%;\n      }\n    }\n\n    @include mq($from: wide2) {\n      @include font-size(48);\n      padding: $padding calc($padding * 4) $padding $padding;\n\n      &:after {\n        border-top: 10px solid $font-color;\n        border-right: 10px solid $font-color;\n        height: 50px;\n        width: 50px;\n      }\n    }\n  }\n\n  @include mq($from: small-screen) {\n    height: 100vh;\n    width: 30vw;\n  }\n}\n\n.projects {\n  flex-grow: 1;\n  @include flexbox(column, normal, normal);\n  width: 100%;\n\n  section {\n    height: calc(100vh / 6);\n    opacity: 0;\n\n    will-change: transform;\n\n    animation-timing-function: linear;\n    animation-fill-mode: both;\n    animation-duration: 0.5s;\n    animation-name: fadeIn;\n\n    transition: all 0.3s ease-in-out;\n\n    @include mq($from: small-screen) {\n      &:hover {\n        transform: scale(1.1);\n        z-index: 1;\n      }\n    }\n  }\n\n  @include mq($from: small-screen) {\n    flex-direction: row;\n    flex-flow: row wrap;\n    width: 70vw;\n\n    section {\n      flex-grow: 1;\n      height: 50vh;\n      width: 33%;\n    }\n  }\n}\n\n@for $i from 1 through 6 {\n  .projects section:nth-of-type(#{$i}) {\n    animation-delay: #{0.3 + calc(($i) / 4)}s;\n  }\n}\n\n@keyframes gradient {\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n}\n\n@keyframes fadeIn {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n"],"names":[],"sourceRoot":""}